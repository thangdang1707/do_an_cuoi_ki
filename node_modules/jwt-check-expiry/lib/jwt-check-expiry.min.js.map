{"version":3,"file":"jwt-check-expiry.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,mBAAoB,GAAIH,GACL,iBAAZC,QACdA,QAAQ,oBAAsBD,IAE9BD,EAAK,oBAAsBC,IAR7B,CASGK,MAAM,WACT,M,uFCuBA,UAAkC,oBAAXC,QAA0BA,OAAOC,MAAQD,OAAOC,KAAKC,KAAKF,SA1BjF,SAAsBG,GACpB,IAAIC,EAAS,GACPC,EAAMC,OAAOH,GAAOI,QAAQ,MAAO,IACzC,GAAIF,EAAIG,OAAS,GAAM,EACrB,MAAM,IAAIC,MAAM,qEAElB,IAEE,IAAIC,EAAK,EAAGC,EAAK,EAAGC,OAAM,EAAEC,EAAM,EAEjCD,EAASP,EAAIS,OAAOD,MAEpBD,IACCD,EAAKD,EAAK,EAAS,GAALC,EAAUC,EAASA,EAGnCF,IAAO,GACFN,GAAUE,OAAOS,aAAa,IAAOJ,KAAS,EAAID,EAAM,IACzD,EAGJE,EAvBgB,oEAuBKI,QAAQJ,GAE/B,OAAOR,I,+ECxBT,aAsBA,SAAgBa,EAAOC,G,MACjBC,EAAS,GACTC,EAAU,GACd,IACGD,GAAD,EAAoBD,EACjBG,MAAM,KACNC,MAAM,EAAG,GACTC,KAAI,SAACC,GAAkB,OAAAC,KAAKC,MAAM,UAAKF,QAHnC,GAAEJ,EAAO,KAIhB,MAAOO,GACP,MAAM,IAAIlB,MAAM,qBAElB,MAAO,CAAEU,OAAM,EAAEC,QAAO,GA/B1B,mBAA0CF,EAAeU,GACvD,GAAqB,iBAAVV,IAAuBA,EAAO,MAAM,IAAIT,MAAM,qBAEzD,IAAMoB,EAAeZ,EAAOC,GACtBY,GAAc,IAAIC,MAAOC,UAAY,IAE3C,OAAKJ,GAAeC,EAAaT,QAAQa,IAChCH,EAAcD,EAAaT,QAAQa,KACjCJ,EAAaT,QAAQc,eAAeN,IACzCE,EAAeD,EAAaT,QAAQ,GAAGQ,IAW/C,aC3BIO,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa3C,QAGrB,IAAIC,EAASuC,EAAyBE,GAAY,CAGjD1C,QAAS,IAOV,OAHA6C,EAAoBH,GAAUzC,EAAQA,EAAOD,QAASyC,GAG/CxC,EAAOD,Q,8ECrBf,aAEIK,SACDA,OAAeyC,UAAY,CAAEC,kBAAiB,UAAEzB,OAAM,Y","sources":["webpack://jwt-check-expiry/webpack/universalModuleDefinition","webpack://jwt-check-expiry/./src/atob.ts","webpack://jwt-check-expiry/./src/index.ts","webpack://jwt-check-expiry/webpack/bootstrap","webpack://jwt-check-expiry/./src/index-standalone.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jwt-check-expiry\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jwt-check-expiry\"] = factory();\n\telse\n\t\troot[\"jwt-check-expiry\"] = factory();\n})(self, function() {\nreturn ","/**\n * The code is taken from:\n * https://github.com/davidchambers/Base64.js\n */\n\nconst base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction atobPolyfill(input: string) {\n  let output = '';\n  const str = String(input).replace(/=+$/, '');\n  if (str.length % 4 === 1) {\n    throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    let bc = 0, bs = 0, buffer, idx = 0;\n    // get next character\n    (buffer = str.charAt(idx++));\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer &&\n    ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n    // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = base64chars.indexOf(buffer);\n  }\n  return output;\n}\n\nexport default (typeof window !== 'undefined' && window.atob && window.atob.bind(window)) || atobPolyfill;\n","/**\n * @author Vipin Kumar, Parveen Kumar\n * @summary  Check JWT is expired or not\n * @description A global JWT validator utility check weather expired or not.\n * @public\n */\nimport atob from './atob';\n\nexport default function isJwtTokenExpired(token: string, optionalKey?: string) {\n  if (typeof token !== 'string' || !token) throw new Error('Invalid JWT token');\n\n  const decodedToken = decode(token);\n  const currentTime = new Date().getTime() / 1000;\n\n  if (!optionalKey && decodedToken.payload.exp) {\n    return currentTime > decodedToken.payload.exp;\n  } else if (decodedToken.payload.hasOwnProperty(optionalKey)) {\n    if (currentTime > (decodedToken.payload[`${optionalKey}`])) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  else{\n    return true;\n  }\n}\n\nexport function decode(token: string): any {\n  let header = {};\n  let payload = {};\n  try {\n    [header, payload] = token\n      .split('.')\n      .slice(0, 2)\n      .map((encodedString) => JSON.parse(atob(encodedString)));\n  } catch (err) {\n    throw new Error('Invalid JWT token');\n  }\n  return { header, payload };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import isJwtTokenExpired, { decode } from './index';\n\nif (window) {\n  (window as any).JwtHelper = { isJwtTokenExpired, decode };\n}\n"],"names":["root","factory","exports","module","define","amd","self","window","atob","bind","input","output","str","String","replace","length","Error","bc","bs","buffer","idx","charAt","fromCharCode","indexOf","decode","token","header","payload","split","slice","map","encodedString","JSON","parse","err","optionalKey","decodedToken","currentTime","Date","getTime","exp","hasOwnProperty","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","JwtHelper","isJwtTokenExpired"],"sourceRoot":""}